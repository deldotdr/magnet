Misted
======
OOI Iteration 3
June, 2009

Misted is a play on the word Twisted. I was misted by Twisted (confused),
and the M also stands for messaging.

This project is an experiment. The goal is to use an AMQP connection as the
facility supporting a Transport service by implementing the necessary
twisted.internet interfaces.

The usage looks like this:
--------------------------

Client Pattern:

fog.connectMS(address, factory, message_service)

Server Pattern:

fog.listenMS(address, factory, message_service)


Compare that to twisted's 

reactor.connectTCP(host, port, factory)

reactor.listenTCP(port, factory, bind_address)


In both cases, factory is *anything* that implements
twisted.internet.interfaces.IProtocolFactory! (awesome!)

messaging_service is a running AMQP client. This has to be setup before
using fog.listenMS or fog.connectMS.


File explanations (sorry about the silly names):
------------------------------------------------
The fog.py file is based on twisted.internet.tcp. The classes here are
fulfilling well known twisted interfaces and concepts.

The river.py file is an attempt to abstract AMQP such that
MistedConnections treat amqp channels the same (or close to the same) way
that tcp.Connection (and related classes) use the socket. The classes in
this file are the hard part. The desired effect is that
fog.MistedConnection would be able to use some abstraction of amqp to
send/receive data in a way resembling the socket.

The amqp.py file provides a AMQPClientCreator in proper Twisted style. This
is actually the cleanest job of this I have seen, and should be put into
Magnet.



Requires:
---------
Twisted
txAMQP


Test Cases:
-----------
dtest.py - Test use of Client pattern
dservertet.py - Test use of Server pattern 


